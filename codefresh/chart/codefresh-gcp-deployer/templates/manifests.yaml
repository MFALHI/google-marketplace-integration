---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-db-secret
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: db-secret
type: Opaque
data:
  password: "{{ .Values.dbPassword }}"
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mysql
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: codefresh-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Release.Name }}"
      app.kubernetes.io/component: codefresh-mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}"
        app.kubernetes.io/component: codefresh-mysql
    spec:
      containers:
      - image: {{ .Values.imageMysql }}
        name: mysql
        env:
        - name: "MYSQL_ROOT_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-db-secret
              key: password
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-mysql-pvc
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-mysql-pvc
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: codefresh-mysql
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-mysql-svc
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: codefresh-mysql
spec:
  ports:
  - port: 3306
  selector:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: codefresh-mysql
  clusterIP: None
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ .Release.Name }}-codefresh
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: codefresh-webserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Release.Name }}"
      app.kubernetes.io/component: codefresh-webserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}"
        app.kubernetes.io/component: codefresh-webserver
    spec:
      initContainers:
      - image: {{ .Values.imageInit }}
        name: codefresh-init
        env:
        - name: AGENT_LOCAL_PORT
          value: "6080"
        volumeMounts:
        - name: data
          mountPath: /var/www/html
          subPath: wp
        - name: ubbagent-config
          mountPath: /etc/ubbagent
      containers:
      - image: {{ .Values.imageCodefreshRepo }}:{{ .Values.imageCodefreshTag }}
        name: codefresh
        env:
        - name: CODEFRESH_DB_HOST
          value: {{ .Release.Name }}-mysql-svc
        - name: CODEFRESH_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-db-secret
              key: password
        - name: CODEFRESH_DB_USER
          value: root
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: data
          mountPath: /var/www/html
          subPath: wp
      - image: {{ .Values.imageUbbagent }}
        name: ubbagent
        env:
        - name: AGENT_CONFIG_FILE
          value: /etc/ubbagent/config.yaml
        - name: AGENT_LOCAL_PORT
          value: "6080"
        - name: AGENT_STATE_DIR
          value: /var/lib/ubbagent
        - name: AGENT_REPORT_DIR
          value: /var/lib/ubbagent/reports
        volumeMounts:
        - name: ubbagent-config
          mountPath: /etc/ubbagent
        - name: ubbagent-state
          mountPath: /var/lib/ubbagent
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-codefresh-pvc
      - name: ubbagent-config
        emptyDir: {}
      # TODO(volkman): state directory should maybe be on a PV.
      - name: ubbagent-state
        emptyDir: {}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-codefresh-pvc
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: codefresh-webserver
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-codefresh-svc
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: codefresh-webserver
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  selector:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: codefresh-webserver
  type: ClusterIP
